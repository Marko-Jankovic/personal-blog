
/*******************************************************
  Mixins
  - Snippets of reusable CSS to develop faster and keep code readable
 *******************************************************/

/*
  Forms
 */
// Input Field
@mixin text-field {
  @include border-radius($form-border-radius);
  background: $form-background-color;
  border: 1px solid $form-border-color;

  &:hover {
    border: 1px solid $form-border-hover-color;
    background: $form-background-hover-color;
  }

  &:focus {
    border: 1px solid $form-border-focus-color;
    background: $form-background-focus-color;
  }
}

// Textarea
@mixin textarea {
  @include border-radius($form-border-radius);
  background: $form-background-color;
  border: 1px solid $form-border-color;

  &:hover {
    border: 1px solid $form-border-hover-color;
  }

  &:focus {
     border: 1px solid $form-border-focus-color;
  }
}


// Select Button
@mixin select-holder {
  @include border-radius($form-border-radius);
  background: mix($form-background-start-color, $form-background-end-color);
  @include background(linear-gradient(top, $form-background-start-color, $form-background-end-color));
  border: 1px solid $form-border-color;
  font-size: $font-size-small;

  &:hover {
    border: 1px solid $form-border-hover-color;
  }

  &:focus {
    border: 1px solid $form-border-focus-color;
  }
}

/*
  Buttons [ Default Button, Filter Button ]
 */
// Filter Button (drill button)
@mixin button-filter {
  border: $button-filter-border;
  color: $button-filter-color;
  text-shadow: 0px 1px 1px $base-button-filter-text-shadow-color;
  @include border-radius($button-filter-border-radius);
  background-color: mix($button-filter-start-color, $button-filter-end-color);
  @include background-image(linear-gradient(top, $button-filter-start-color $button-filter-start-color-value, $button-filter-end-color $button-filter-end-color-value));

  &:hover {
    background-color: mix($button-filter-start-hover-color, $button-filter-end-hover-color);
    @include background-image(linear-gradient(top, $button-filter-start-hover-color $button-filter-start-color-value, $button-filter-end-hover-color $button-filter-end-color-value));
  }

  &:focus {
    background-color: mix($button-filter-start-focus-color, $button-filter-end-focus-color);
    @include background-image(linear-gradient(top, $button-filter-start-focus-color $button-filter-start-color-value, $button-filter-end-focus-color $button-filter-end-color-value));
  }
}


// Button Default
@mixin button {
  border: $base-button-color;
  color: white;
  @include border-radius($button-border-radius);
  background-color: $base-button-color;
}

// Button Success Lead
@mixin button-success {
  border: $button-border;
  color: $button-color;
  text-shadow: 0px 1px 1px $base-button-text-shadow-color;
  @include border-radius($button-border-radius);
  background-color: mix(#00661A, #004000);
  @include background-image(linear-gradient(top, #008C00 $button-start-color-value, #00661A $button-end-color-value));

  &:hover {
    background-color: mix(#008C00, #008C00);
    @include background-image(linear-gradient(top, #008C00 $button-start-color-value, #005515 $button-end-color-value));
  }

  &:focus {
    background-color: mix($button-start-focus-color, $button-end-focus-color);
    @include background-image(linear-gradient(top, #008C00 $button-start-color-value, #004010 $button-end-color-value));
  }
}

// Calculate px to rem for font-size
@mixin font-size($size, $is-important: false) {
    $size: if(unitless($size), $size, $size / 1px);

    @if $is-important {
      font-size: $size + px !important;
      font-size: ($size / 10) + rem !important;
    } @else {
      font-size: $size + px;
      font-size: ($size / 10) + rem;
    }
}


// this should be finished
@mixin background-url($path, $position, $repeat){
	background-image: image-url($path, true, true);
	background-repeat: $repeat;
	background-position: $position;
}

// responsive: to use, include the following code in your
// declarations:
//
// .class {
//     some-property: some-value;
//
//     @include responsive($breakpoint) { some-property: some-new-value; }
// }
//
@mixin responsive($breakpoint, $media: all) {
  @media only #{$media} and ($breakpoint) {
    @content;
  }
}

@mixin hidpi($media: all) {
  @media
    only #{$media} and (min--moz-device-pixel-ratio: 1.5),
    only #{$media} and (-o-min-device-pixel-ratio: 3/2),
    only #{$media} and (-webkit-min-device-pixel-ratio: 1.5),
    only #{$media} and (min-device-pixel-ratio: 1.5),
    only #{$media} and (min-resolution: 144dpi),
    only #{$media} and (min-resolution: 1.5dppx) {

    @content;
  }
}

/*
  Reset Unordered List
 */
@mixin reset-ul-list {
    list-style: none;
    margin: 0;
    padding: 0;
}


/*
  Clearfix
 */
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

/*
  Webkit-style focus
 */
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

/*
  Center-align a block level element
 */
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}


@mixin vastjs-unselectable {
	-webkit-tap-highlight-color: rgba(0,0,0,0);
   -moz-user-select: -moz-none;
   -khtml-user-select: none;
   -webkit-user-select: none;
   user-select: none;
}